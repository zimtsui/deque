{"version":3,"sources":["../src/index.js"],"names":["constructor","publ","vector","front","rear","shrink","slice","push","length","shift","num","Error","clear","getFront","getRear","Object","defineProperty","get","shiftWhile","pred","takeRearWhile","i","reverse","takeFrontWhile","Symbol","iterator"],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nconst constructor = () => {\n    const publ = {};\n\n    let vector;\n    let front;\n    let rear;\n\n    vector = [];\n    front = 0;\n    rear = 0;\n\n    const shrink = () => {\n        if (front > rear - front) {\n            vector = vector.slice(front, rear);\n            rear -= front;\n            front = 0;\n        }\n    };\n\n    publ.push = (...elems) => {\n        vector.push(...elems);\n        rear += elems.length;\n        return publ;\n    };\n\n    publ.shift = (num = 1) => {\n        if (front + num > rear) throw new Error('no enough elements');\n        front += num;\n        shrink();\n        assert(front + front <= rear);\n        return publ;\n    };\n\n    publ.clear = () => {\n        front = rear;\n        shrink();\n        assert(front + front <= rear);\n        return publ;\n    };\n\n    publ.getFront = () => {\n        if (front == rear) throw new Error('getting front of an empty queue.');\n        return vector[front];\n    };\n\n    publ.getRear = () => {\n        if (front == rear) throw new Error('getting front of an empty queue.');\n        return vector[rear - 1];\n    };\n\n    Object.defineProperty(publ, 'length', {\n        get: () => rear - front,\n    });\n\n    publ.shiftWhile = (pred) => {\n        for (; front < rear && pred(vector[front]); front += 1);\n        shrink();\n        assert(front + front <= rear);\n        return publ;\n    };\n\n    publ.takeRearWhile = (pred) => {\n        let i;\n        for (i = rear; i > front && pred(vector[i - 1]); i -= 1);\n        return vector.slice(i, rear).reverse();\n    };\n\n    publ.takeFrontWhile = (pred) => {\n        let i;\n        for (i = front; i < rear && pred(vector[i]); i += 1);\n        return vector.slice(front, i);\n    };\n\n    // publ[Symbol.iterator] = function* getIterator() {\n    //     for (let i = front; i < rear; i += 1) yield vector[i];\n    // };\n\n    publ[Symbol.iterator] = () => vector.slice(front, rear)[Symbol.iterator]();\n\n    return publ;\n};\n\nexport default {\n    constructor,\n};\n"],"file":"index.js"}